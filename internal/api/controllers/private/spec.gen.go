// Package private provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Dispatch Playbooks
	// (POST /internal/dispatch)
	ApiInternalRunsCreate(ctx echo.Context) error
	// Dispatch Playbooks
	// (POST /internal/v2/dispatch)
	ApiInternalV2RunsCreate(ctx echo.Context) error
	// Obtain connection status of recipient(s)
	// (POST /internal/v2/recipients/status)
	ApiInternalV2RecipientsStatus(ctx echo.Context) error
	// Get Version
	// (GET /internal/version)
	ApiInternalVersion(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// ApiInternalRunsCreate converts echo context to params.
func (w *ServerInterfaceWrapper) ApiInternalRunsCreate(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ApiInternalRunsCreate(ctx)
	return err
}

// ApiInternalV2RunsCreate converts echo context to params.
func (w *ServerInterfaceWrapper) ApiInternalV2RunsCreate(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ApiInternalV2RunsCreate(ctx)
	return err
}

// ApiInternalV2RecipientsStatus converts echo context to params.
func (w *ServerInterfaceWrapper) ApiInternalV2RecipientsStatus(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ApiInternalV2RecipientsStatus(ctx)
	return err
}

// ApiInternalVersion converts echo context to params.
func (w *ServerInterfaceWrapper) ApiInternalVersion(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ApiInternalVersion(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/internal/dispatch", wrapper.ApiInternalRunsCreate)
	router.POST(baseURL+"/internal/v2/dispatch", wrapper.ApiInternalV2RunsCreate)
	router.POST(baseURL+"/internal/v2/recipients/status", wrapper.ApiInternalV2RecipientsStatus)
	router.GET(baseURL+"/internal/version", wrapper.ApiInternalVersion)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9RYW5PbthX+Kxi0D8kMJVFarePRU51tWu/U6Xoce/MQezyH5KF0HBBgAFBrxaP/3gEI",
	"3pa0ZLveNnnjBed+8J3LB56qolQSpTV884FrNKWSBv3L95C9wN8qNNa9pUpalP4RylJQCpaUXLwzSrpv",
	"Jt1hAe7prxpzvuF/WXSsF/Vfs/hBa6X58XiMeIYm1VQ6JnzjZLFGmPsbCBy/mmbzgZdalagt1doVaAxs",
	"0T0OWT2tCpBMI2SQCGToyFlzOuL4HopSIN/wH0lSURXMWE1yywTKrd0xMmzJI24PpTtT//MqafytIo0Z",
	"3/zSCn/THlTJO0wtP0b8Rm+vs7Fa1xlKSzmhYXaHTOktSPrdO5HZHVj/dUt7dLobVekUWYJCya1hVvGI",
	"F/D+mVeRb5ZxxAuS7etI3Yg/F3BIlPr131Cc95GEApnKvQplIGS6knP2ymDGrGKlRoOyr2T/HCPJ8L1F",
	"LUEwczAWC8O++QksCkEWv50P/P4Pes+uNFlKQbCr2x8MP2+NJplSCWJsyivjxHb6VwY1I2lRQ2pdXO/I",
	"7vwfg3pP6TAH3u1Au1PnVXiBKZWE0l4pmdN2rIhuDsxMiSnllLLUH610HWXlTzprh5lswL6lUxmjG9ta",
	"jzKSxoK8ZwzARbLMAWaXj/KL2TpbrmePV5ePZ4+Wl9lyias4fhTziOdKF2D5hlcVZXzCVKeQ0ttPVGqQ",
	"yc7ZJDtFB/otVxfry3OePk5cqdb3P1mwlXcaCHGT880vp/GmJfyZ7O5GO+vu40iqpMTU4pStMnMwh4bd",
	"7dDuUDNg4bizlQxDYyERZHaYdXnWJkLn20QpgSBHONIJHyPJm77hjf4jGOzidMoPNSZ54Y1uHcV8UVaJ",
	"oHSuSpRQ0vwAhZh2ZyVbjUa29M0OWk3B44tKXmmE4PD7scgmwMr4oDP3s8k5HUpFL7tWcZdL7vpvUTtx",
	"A998lqXOYaNwZfgxo65lWdmxSZCmqvpCdz8JtMeI75SpK/TJbA9aPPWHjxEXkKAwXyT7WU36lVMm4pYK",
	"VNUX83oZyI8Rr7T4Ii6vtDiZu03Eagmnov20CcowX2/8AwhxiBjJGm0dXkCiKst8JBnJvRJ7zFzldAn9",
	"vF9NU5AsQVZqtacMs/lr+XJHZsCLjCt0TWmegRDKIZUjf+sktD2Emb+WPyqNao86YmQb5g116u/iENgS",
	"tHeIksGYHQOZeROcBSit0of5a8kjTq7mT6S/NJQI9Ewm2hDHyBdvMOxXqe6kU+lJTTOQ0PQhVJefg3da",
	"0IMFgNBYKm1NrU9XdZxnhJc/UepaGdPFrvnLKGugp+5+Ar9OSp4n6+/iVTyDR3k2Wz9eZ7PHcXI5yyCO",
	"YQ0XcZKvztfeqeIXPoDWcOhn3+1q7O7/I0zI0GiekjxoSo/RuHh9uuC2opX91vCk8PbgVwe1ltvbtG0O",
	"P6ktCb3kHwcXI36HibPCKIFvh6wmqX7G5Ko+fQ5XQ7D7EauVDbnzEaQ1vW6hBZkz6d2QTNyeW9SG6pF1",
	"eNfDj+aaP3l+Pbjf+9X5EWHoi/Gk8uJZPemViqR1U10YS2rUDYLvMGHB/67t1NhNNTnJjBVK40RZGY9u",
	"L3fIckKRuWKhQk1iiStBtN2JAzPVdovGYjYfAJOPyOkW3QNnrpq1AKQ+b7EAEm6mUr9j/jeN2Q7sPFUF",
	"H037bbX7O5kSbOpaazIMmhGN5Uo7I6Sb35py0BAZpmSoom37zPYE7EqoKmNX9TelnVWWrI/elMBrGQbW",
	"OtT7JjH4ch7PYw9P9ZXhG34xj+cXLnXB7nwCLihQL7LA0YPxZJVrZZqeDZVxtt1T2VdXY5VGZ5uutzGZ",
	"O+jaAo2p0plxdjnM99G/zviGPympMaa7MLy+iWjs9yo7fNYG51OvWd3yHv1q4rqmuaw3E+Ftef/+HWuA",
	"6C2ZVvF3X2271EeLiR3Tzb+crus4/hifVrFFb/Xlt1FVUYA+9GLZRdIf6NJhv/qDZcTt6n+fE7erP1dW",
	"fHaI27pmFqZdSUzHerxE6C/6AptvzLcMNDLYAwlIBJ6JaCs+LEQeOq7jNcrnxjN+QK2CE45jPR4CAm4S",
	"CyT781KYP1Q+COj9rOkajy2ezJM6P9zMtSdTr4d9P8LuwLCkImFZrlVx+tYHaf9lHE65vxHxQG7+J1o2",
	"EOF6A9TG7/x8Y8oXPBrtYAVY2iNzhZof3xz/EwAA//9fuMmJ4RgAAA==",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
