// Package private provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Dispatch Playbooks
	// (POST /internal/dispatch)
	ApiInternalRunsCreate(ctx echo.Context) error
	// Cancel Playbook Runs
	// (POST /internal/v2/cancel)
	ApiInternalV2RunsCancel(ctx echo.Context) error
	// Dispatch Playbooks
	// (POST /internal/v2/dispatch)
	ApiInternalV2RunsCreate(ctx echo.Context) error
	// Obtain connection status of recipient(s)
	// (POST /internal/v2/recipients/status)
	ApiInternalV2RecipientsStatus(ctx echo.Context) error
	// Get Version
	// (GET /internal/version)
	ApiInternalVersion(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// ApiInternalRunsCreate converts echo context to params.
func (w *ServerInterfaceWrapper) ApiInternalRunsCreate(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ApiInternalRunsCreate(ctx)
	return err
}

// ApiInternalV2RunsCancel converts echo context to params.
func (w *ServerInterfaceWrapper) ApiInternalV2RunsCancel(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ApiInternalV2RunsCancel(ctx)
	return err
}

// ApiInternalV2RunsCreate converts echo context to params.
func (w *ServerInterfaceWrapper) ApiInternalV2RunsCreate(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ApiInternalV2RunsCreate(ctx)
	return err
}

// ApiInternalV2RecipientsStatus converts echo context to params.
func (w *ServerInterfaceWrapper) ApiInternalV2RecipientsStatus(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ApiInternalV2RecipientsStatus(ctx)
	return err
}

// ApiInternalVersion converts echo context to params.
func (w *ServerInterfaceWrapper) ApiInternalVersion(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ApiInternalVersion(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/internal/dispatch", wrapper.ApiInternalRunsCreate)
	router.POST(baseURL+"/internal/v2/cancel", wrapper.ApiInternalV2RunsCancel)
	router.POST(baseURL+"/internal/v2/dispatch", wrapper.ApiInternalV2RunsCreate)
	router.POST(baseURL+"/internal/v2/recipients/status", wrapper.ApiInternalV2RecipientsStatus)
	router.GET(baseURL+"/internal/version", wrapper.ApiInternalVersion)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"YNgSiW216PrT+p8AAAD//+iZpjQNHAAA",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
