// Package private provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package private

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Dispatch Playbooks
	// (POST /internal/dispatch)
	ApiInternalRunsCreate(ctx echo.Context) error
	// Cancel Playbook Runs
	// (POST /internal/v2/cancel)
	ApiInternalV2RunsCancel(ctx echo.Context) error
	// Dispatch Playbooks
	// (POST /internal/v2/dispatch)
	ApiInternalV2RunsCreate(ctx echo.Context) error
	// Obtain connection status of recipient(s)
	// (POST /internal/v2/recipients/status)
	ApiInternalV2RecipientsStatus(ctx echo.Context) error
	// Get Version
	// (GET /internal/version)
	ApiInternalVersion(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// ApiInternalRunsCreate converts echo context to params.
func (w *ServerInterfaceWrapper) ApiInternalRunsCreate(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ApiInternalRunsCreate(ctx)
	return err
}

// ApiInternalV2RunsCancel converts echo context to params.
func (w *ServerInterfaceWrapper) ApiInternalV2RunsCancel(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ApiInternalV2RunsCancel(ctx)
	return err
}

// ApiInternalV2RunsCreate converts echo context to params.
func (w *ServerInterfaceWrapper) ApiInternalV2RunsCreate(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ApiInternalV2RunsCreate(ctx)
	return err
}

// ApiInternalV2RecipientsStatus converts echo context to params.
func (w *ServerInterfaceWrapper) ApiInternalV2RecipientsStatus(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ApiInternalV2RecipientsStatus(ctx)
	return err
}

// ApiInternalVersion converts echo context to params.
func (w *ServerInterfaceWrapper) ApiInternalVersion(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ApiInternalVersion(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/internal/dispatch", wrapper.ApiInternalRunsCreate)
	router.POST(baseURL+"/internal/v2/cancel", wrapper.ApiInternalV2RunsCancel)
	router.POST(baseURL+"/internal/v2/dispatch", wrapper.ApiInternalV2RunsCreate)
	router.POST(baseURL+"/internal/v2/recipients/status", wrapper.ApiInternalV2RecipientsStatus)
	router.GET(baseURL+"/internal/version", wrapper.ApiInternalVersion)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"lRsAAA==",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
